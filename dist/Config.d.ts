export namespace config {
    let appName: string;
    let baseUrl: string;
    let timeout: number;
    let proxy: boolean;
    let namespace: string;
    let sysHealth: string;
    let sysSealStatus: string;
    let sysHostInfo: string;
    let sysCapabilities: string;
    let sysCapabilitiesSelf: string;
    let sysInternalCounters: string;
    let sysCounterTypes: string[];
    let sysMetrics: string;
    let sysMetricFormats: string[];
    let sysSeal: string;
    let sysUnseal: string;
    let tokenCreate: string;
    let tokenCreateOrphan: string;
    let tokenCreateRole: string;
    let tokenRevoke: string;
    let tokenRevokeSelf: string;
    let tokenLookup: string;
    let tokenLookupSelf: string;
    let tokenRenew: string;
    let tokenRenewSelf: string;
    let tokenListAccessors: string;
    let tokenLookupAccessor: string;
    let tokenRenewAccessor: string;
    let tokenRevokeAccessor: string;
    let k8sRootPath: string;
    let k8sLogin: string[];
    let k8sUpdateConfig: string[];
    let k8sReadConfig: string[];
    let k8sCreateRole: string[];
    let k8sListRoles: string[];
    let k8sReadRole: string[];
    let k8sDeleteRole: string[];
    let appRoleRootPath: string;
    let appRoleLogin: string[];
    let appRoleCreateSecret: string[];
    let appRoleReadSecret: string[];
    let appRoleDestroySecret: string[];
    let ldapRootPath: string;
    let ldapLogin: string[];
    let ldapCreateUser: string[];
    let ldapCreateGroup: string[];
    let ldapDeleteUser: string[];
    let ldapDeleteGroup: string[];
    let ldapReadUser: string[];
    let ldapReadGroup: string[];
    let ldapListUsers: string[];
    let ldapListGroups: string[];
    let ldapReadConfig: string[];
    let ldapSetConfig: string[];
    let certRootPath: string;
    let certLogin: string[];
    let userpassRootPath: string;
    let userpassCreateUser: string[];
    let userpassReadUser: string[];
    let userpassDeleteUser: string[];
    let userpassUpdatePass: string[];
    let userpassUpdatePolicies: string[];
    let userpassListUsers: string[];
    let userpassLogin: string[];
    let pkiRootPath: string;
    let pkiReadCACert: string[];
    let pkiReadCAChain: string[];
    let pkiReadCert: string[];
    let pkiListCerts: string[];
    let pkiSetCACert: string[];
    let pkiReadCrlConf: string[];
    let pkiSetCrlConf: string[];
    let pkiReadUrls: string[];
    let pkiSetUrls: string[];
    let pkiReadCrl: string[];
    let pkiRotateCrl: string[];
    let pkiGenIntermediate: string[];
    let pkiSignIntermediate: string[];
    let pkiSetIntermediate: string[];
    let pkiGenerateCertificate: string[];
    let pkiRevokeCertificate: string[];
    let pkiDeleteRoot: string[];
    let pkiGenerateRoot: string[];
    let pkiCreateRole: string[];
    let pkiReadRole: string[];
    let pkiListRoles: string[];
    let pkiDeleteRole: string[];
    let kvRootPath: string;
    let kvUpdateEngine: string[];
    let kvReadEngine: string[];
    let kvCreateSecret: string[];
    let kvUpdateSecret: string[];
    let kvReadSecret: string[];
    let kvDeleteLatestSecret: string[];
    let kvDeleteSecret: string[];
    let kvEliminateSecret: string[];
    let kvUndeleteSecret: string[];
    let kvDestroySecret: string[];
    let kvListSecrets: string[];
    let kvReadSecretMeta: string[];
    let kvCreateSecretMeta: string[];
    let kvUpdateSecretMeta: string[];
    let adRootPath: string;
    let adSetConfig: string[];
    let adReadConfig: string[];
    let adDeleteConfig: string[];
    let adListRoles: string[];
    let adReadRole: string[];
    let adCreateRole: string[];
    let adDeleteRole: string[];
    let adGetCred: string[];
    let adListLibraries: string[];
    let adCreateLibrary: string[];
    let adReadLibrary: string[];
    let adDeleteLibrary: string[];
    let adCheckCredOut: string[];
    let adCheckCredIn: string[];
    let adGetCredStatus: string[];
    let adRotateCred: string[];
    let totpRootPath: string;
    let totpCreateKey: string[];
    let totpReadKey: string[];
    let totpListKeys: string[];
    let totpDeleteKey: string[];
    let totpGenerateCode: string[];
    let totpValidateCode: string[];
}
//# sourceMappingURL=Config.d.ts.map